
M4_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800058c  08000594  00010594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800058c  0800058c  00010594  2**0
                  CONTENTS
  4 .ARM          00000000  0800058c  0800058c  00010594  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800058c  08000594  00010594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800058c  0800058c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000590  08000590  00010590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010594  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010594  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000751  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000303  00000000  00000000  00010d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00011018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d0  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b2e  00000000  00000000  000111c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006a6  00000000  00000000  00012cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007f68  00000000  00000000  00013394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001b2fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000230  00000000  00000000  0001b34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000574 	.word	0x08000574

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000574 	.word	0x08000574

080001e8 <GPIO_V_Set_Pin_value>:
}


/* */
void GPIO_V_Set_Pin_value(u8 pin)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if (pin<=63)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b3f      	cmp	r3, #63	; 0x3f
 80001f6:	d831      	bhi.n	800025c <GPIO_V_Set_Pin_value+0x74>
	{
		u8 GPIO ,PIN_Value_Low;
		GPIO =	pin/ GPIO_Check;
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	091b      	lsrs	r3, r3, #4
 80001fc:	737b      	strb	r3, [r7, #13]
		PIN_Value_Low= pin%GPIO_Check;
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 030f 	and.w	r3, r3, #15
 8000204:	733b      	strb	r3, [r7, #12]
		switch(GPIO)
 8000206:	7b7b      	ldrb	r3, [r7, #13]
 8000208:	2b03      	cmp	r3, #3
 800020a:	d85b      	bhi.n	80002c4 <GPIO_V_Set_Pin_value+0xdc>
 800020c:	a201      	add	r2, pc, #4	; (adr r2, 8000214 <GPIO_V_Set_Pin_value+0x2c>)
 800020e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000212:	bf00      	nop
 8000214:	08000225 	.word	0x08000225
 8000218:	08000233 	.word	0x08000233
 800021c:	08000241 	.word	0x08000241
 8000220:	0800024f 	.word	0x0800024f
		{
		case PORTA:	GPIOA_Reg->GPIOx_BSRR=1<<(PIN_Value_Low+PIN_Shifting_Low);		break;
 8000224:	7b3b      	ldrb	r3, [r7, #12]
 8000226:	3310      	adds	r3, #16
 8000228:	2201      	movs	r2, #1
 800022a:	409a      	lsls	r2, r3
 800022c:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <GPIO_V_Set_Pin_value+0xf0>)
 800022e:	619a      	str	r2, [r3, #24]
 8000230:	e04b      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		case PORTB:	GPIOB_Reg->GPIOx_BSRR=1<<(PIN_Value_Low+PIN_Shifting_Low);		break;
 8000232:	7b3b      	ldrb	r3, [r7, #12]
 8000234:	3310      	adds	r3, #16
 8000236:	2201      	movs	r2, #1
 8000238:	409a      	lsls	r2, r3
 800023a:	4b28      	ldr	r3, [pc, #160]	; (80002dc <GPIO_V_Set_Pin_value+0xf4>)
 800023c:	619a      	str	r2, [r3, #24]
 800023e:	e044      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		case PORTC:	GPIOC_Reg->GPIOx_BSRR=1<<(PIN_Value_Low+PIN_Shifting_Low);		break;
 8000240:	7b3b      	ldrb	r3, [r7, #12]
 8000242:	3310      	adds	r3, #16
 8000244:	2201      	movs	r2, #1
 8000246:	409a      	lsls	r2, r3
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <GPIO_V_Set_Pin_value+0xf8>)
 800024a:	619a      	str	r2, [r3, #24]
 800024c:	e03d      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		case PORTD:	GPIOD_Reg->GPIOx_BSRR=1<<(PIN_Value_Low+PIN_Shifting_Low);		break;
 800024e:	7b3b      	ldrb	r3, [r7, #12]
 8000250:	3310      	adds	r3, #16
 8000252:	2201      	movs	r2, #1
 8000254:	409a      	lsls	r2, r3
 8000256:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <GPIO_V_Set_Pin_value+0xfc>)
 8000258:	619a      	str	r2, [r3, #24]
 800025a:	e036      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		default: /* do nothing*/	break;

		}
	}
	else if(pin<=163)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2ba3      	cmp	r3, #163	; 0xa3
 8000260:	d833      	bhi.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
	{
		pin-=100;
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	3b64      	subs	r3, #100	; 0x64
 8000266:	71fb      	strb	r3, [r7, #7]
		u8 GPIO ,PIN_Value_High;
		GPIO =	pin/ GPIO_Check;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	091b      	lsrs	r3, r3, #4
 800026c:	73fb      	strb	r3, [r7, #15]
		PIN_Value_High= pin%GPIO_Check;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	f003 030f 	and.w	r3, r3, #15
 8000274:	73bb      	strb	r3, [r7, #14]
		switch(GPIO)
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	2b03      	cmp	r3, #3
 800027a:	d825      	bhi.n	80002c8 <GPIO_V_Set_Pin_value+0xe0>
 800027c:	a201      	add	r2, pc, #4	; (adr r2, 8000284 <GPIO_V_Set_Pin_value+0x9c>)
 800027e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000282:	bf00      	nop
 8000284:	08000295 	.word	0x08000295
 8000288:	080002a1 	.word	0x080002a1
 800028c:	080002ad 	.word	0x080002ad
 8000290:	080002b9 	.word	0x080002b9
		{
		case PORTA:	GPIOA_Reg->GPIOx_BSRR=1<<(PIN_Value_High);		break;
 8000294:	7bbb      	ldrb	r3, [r7, #14]
 8000296:	2201      	movs	r2, #1
 8000298:	409a      	lsls	r2, r3
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <GPIO_V_Set_Pin_value+0xf0>)
 800029c:	619a      	str	r2, [r3, #24]
 800029e:	e014      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		case PORTB:	GPIOB_Reg->GPIOx_BSRR=1<<(PIN_Value_High);		break;
 80002a0:	7bbb      	ldrb	r3, [r7, #14]
 80002a2:	2201      	movs	r2, #1
 80002a4:	409a      	lsls	r2, r3
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <GPIO_V_Set_Pin_value+0xf4>)
 80002a8:	619a      	str	r2, [r3, #24]
 80002aa:	e00e      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		case PORTC:	GPIOC_Reg->GPIOx_BSRR=1<<(PIN_Value_High);		break;
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	2201      	movs	r2, #1
 80002b0:	409a      	lsls	r2, r3
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <GPIO_V_Set_Pin_value+0xf8>)
 80002b4:	619a      	str	r2, [r3, #24]
 80002b6:	e008      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		case PORTD:	GPIOD_Reg->GPIOx_BSRR=1<<(PIN_Value_High);		break;
 80002b8:	7bbb      	ldrb	r3, [r7, #14]
 80002ba:	2201      	movs	r2, #1
 80002bc:	409a      	lsls	r2, r3
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <GPIO_V_Set_Pin_value+0xfc>)
 80002c0:	619a      	str	r2, [r3, #24]
 80002c2:	e002      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		default: /* do nothing*/	break;
 80002c4:	bf00      	nop
 80002c6:	e000      	b.n	80002ca <GPIO_V_Set_Pin_value+0xe2>
		default: /* do nothing*/	break;
 80002c8:	bf00      	nop
	}
	else
	{
		// error handling
	}
}
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020400 	.word	0x40020400
 80002e0:	40020800 	.word	0x40020800
 80002e4:	40020c00 	.word	0x40020c00

080002e8 <RCC_V_InitCLK>:


static void(*Handler_RCC)(void);

void RCC_V_InitCLK(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
		//enable interrupt flag
		RCC_Reg->RCC_CIR|=(1<<10);
	#endif

#elif InputCLK == RCC_HSE
	SET_Bit(RCC_Reg->RCC_CR,16);
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <RCC_V_InitCLK+0x40>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <RCC_V_InitCLK+0x40>)
 80002f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f6:	6013      	str	r3, [r2, #0]
	SET_Bit(RCC_Reg->RCC_CR,19);		//clk security
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <RCC_V_InitCLK+0x40>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <RCC_V_InitCLK+0x40>)
 80002fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000302:	6013      	str	r3, [r2, #0]
	SET_Bit(RCC_Reg->RCC_CR,18);		// by pass HSE
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <RCC_V_InitCLK+0x40>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <RCC_V_InitCLK+0x40>)
 800030a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800030e:	6013      	str	r3, [r2, #0]

	#if RCC_Enable_Interrupt== RCC_Polling
		while(GET_Bit(RCC_Reg->RCC_CR,17)==0); // wait until HSE clk work
	#elif RCC_Enable_Interrupt == RCC_Interrupt

		SET_Bit(RCC_Reg->RCC_CIR,11); // enable interrupt
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <RCC_V_InitCLK+0x40>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <RCC_V_InitCLK+0x40>)
 8000316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800031a:	60d3      	str	r3, [r2, #12]

	#endif

#endif
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800

0800032c <RCC_V_EnablePer>:

void RCC_V_EnablePer(u8 peripheral,u8 Bus_ID)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	if(Bus_ID<5 && peripheral<32)
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d86d      	bhi.n	800041e <RCC_V_EnablePer+0xf2>
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b1f      	cmp	r3, #31
 8000346:	d86a      	bhi.n	800041e <RCC_V_EnablePer+0xf2>
	{
		/* prescaler for AHB Bus */
		RCC_Reg->RCC_CFGR&=~(AHB_Pre_Mask<<4);
 8000348:	4b38      	ldr	r3, [pc, #224]	; (800042c <RCC_V_EnablePer+0x100>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a37      	ldr	r2, [pc, #220]	; (800042c <RCC_V_EnablePer+0x100>)
 800034e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000352:	6093      	str	r3, [r2, #8]
		RCC_Reg->RCC_CFGR|=(RCC_AHB_Prescaler<<4);
 8000354:	4b35      	ldr	r3, [pc, #212]	; (800042c <RCC_V_EnablePer+0x100>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a34      	ldr	r2, [pc, #208]	; (800042c <RCC_V_EnablePer+0x100>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6093      	str	r3, [r2, #8]

		/* prescaler for APB1 Bus */
		RCC_Reg->RCC_CFGR&=~(APB_Mask<<10);
 8000360:	4b32      	ldr	r3, [pc, #200]	; (800042c <RCC_V_EnablePer+0x100>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a31      	ldr	r2, [pc, #196]	; (800042c <RCC_V_EnablePer+0x100>)
 8000366:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800036a:	6093      	str	r3, [r2, #8]
		RCC_Reg->RCC_CFGR|=(RCC_APB1_Prescaler<<10);
 800036c:	4b2f      	ldr	r3, [pc, #188]	; (800042c <RCC_V_EnablePer+0x100>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a2e      	ldr	r2, [pc, #184]	; (800042c <RCC_V_EnablePer+0x100>)
 8000372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000376:	6093      	str	r3, [r2, #8]

		/* Prescaler for APB2 BUS */
		RCC_Reg->RCC_CFGR&=~(APB_Mask<<13);
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <RCC_V_EnablePer+0x100>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	4a2b      	ldr	r2, [pc, #172]	; (800042c <RCC_V_EnablePer+0x100>)
 800037e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000382:	6093      	str	r3, [r2, #8]
		RCC_Reg->RCC_CFGR|=(RCC_APB2_Prescaler<<13);
 8000384:	4b29      	ldr	r3, [pc, #164]	; (800042c <RCC_V_EnablePer+0x100>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a28      	ldr	r2, [pc, #160]	; (800042c <RCC_V_EnablePer+0x100>)
 800038a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800038e:	6093      	str	r3, [r2, #8]
		switch (Bus_ID)
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	2b04      	cmp	r3, #4
 8000394:	d843      	bhi.n	800041e <RCC_V_EnablePer+0xf2>
 8000396:	a201      	add	r2, pc, #4	; (adr r2, 800039c <RCC_V_EnablePer+0x70>)
 8000398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039c:	080003b1 	.word	0x080003b1
 80003a0:	080003c7 	.word	0x080003c7
 80003a4:	080003dd 	.word	0x080003dd
 80003a8:	080003f3 	.word	0x080003f3
 80003ac:	08000409 	.word	0x08000409
		{
		case RCC_AHB1 : RCC_Reg->RCC_AHB1ENR|=(1<<peripheral); break;
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <RCC_V_EnablePer+0x100>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	2101      	movs	r1, #1
 80003b8:	fa01 f202 	lsl.w	r2, r1, r2
 80003bc:	4611      	mov	r1, r2
 80003be:	4a1b      	ldr	r2, [pc, #108]	; (800042c <RCC_V_EnablePer+0x100>)
 80003c0:	430b      	orrs	r3, r1
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
 80003c4:	e02b      	b.n	800041e <RCC_V_EnablePer+0xf2>
		case RCC_AHB2 :	RCC_Reg->RCC_AHB2ENR|=(1<<peripheral); break;
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <RCC_V_EnablePer+0x100>)
 80003c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a15      	ldr	r2, [pc, #84]	; (800042c <RCC_V_EnablePer+0x100>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6353      	str	r3, [r2, #52]	; 0x34
 80003da:	e020      	b.n	800041e <RCC_V_EnablePer+0xf2>
		case RCC_AHB3 :	RCC_Reg->RCC_AHB3ENR|=(1<<peripheral); break;
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <RCC_V_EnablePer+0x100>)
 80003de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003e0:	79fa      	ldrb	r2, [r7, #7]
 80003e2:	2101      	movs	r1, #1
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a10      	ldr	r2, [pc, #64]	; (800042c <RCC_V_EnablePer+0x100>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	6393      	str	r3, [r2, #56]	; 0x38
 80003f0:	e015      	b.n	800041e <RCC_V_EnablePer+0xf2>
		case RCC_APB1 :	RCC_Reg->RCC_APB1ENR|=(1<<peripheral); break;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <RCC_V_EnablePer+0x100>)
 80003f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a0a      	ldr	r2, [pc, #40]	; (800042c <RCC_V_EnablePer+0x100>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6413      	str	r3, [r2, #64]	; 0x40
 8000406:	e00a      	b.n	800041e <RCC_V_EnablePer+0xf2>
		case RCC_APB2 :	RCC_Reg->RCC_APB2ENR|=(1<<peripheral); break;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <RCC_V_EnablePer+0x100>)
 800040a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	2101      	movs	r1, #1
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a05      	ldr	r2, [pc, #20]	; (800042c <RCC_V_EnablePer+0x100>)
 8000418:	430b      	orrs	r3, r1
 800041a:	6453      	str	r3, [r2, #68]	; 0x44
 800041c:	bf00      	nop
	}
	else
	{
		// do nothing
	}
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40023800 	.word	0x40023800

08000430 <RCC_V_SetCallBack>:
	}
	return Local_State;
}

void RCC_V_SetCallBack(void(*Notification)(void))
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if (*Notification!=NULL)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d002      	beq.n	8000444 <RCC_V_SetCallBack+0x14>
	{
		Handler_RCC=Notification;
 800043e:	4a04      	ldr	r2, [pc, #16]	; (8000450 <RCC_V_SetCallBack+0x20>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6013      	str	r3, [r2, #0]
	}
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	2000001c 	.word	0x2000001c

08000454 <RCC_IRQHandler>:

void RCC_IRQHandler ()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	if(Handler_RCC!=NULL)
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <RCC_IRQHandler+0x50>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d01e      	beq.n	800049e <RCC_IRQHandler+0x4a>
	{
		if (GET_Bit(RCC_Reg->RCC_CFGR , 3)==1) //HSI
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <RCC_IRQHandler+0x54>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	2b00      	cmp	r3, #0
 800046a:	d009      	beq.n	8000480 <RCC_IRQHandler+0x2c>
		{
			Handler_RCC();
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <RCC_IRQHandler+0x50>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4798      	blx	r3
			// clear the flag
			SET_Bit(RCC_Reg->RCC_CFGR,18);
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <RCC_IRQHandler+0x54>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <RCC_IRQHandler+0x54>)
 8000478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800047c:	6093      	str	r3, [r2, #8]
	}
	else
	{
		// do nothing
	}
}
 800047e:	e00e      	b.n	800049e <RCC_IRQHandler+0x4a>
		else if(GET_Bit(RCC_Reg->RCC_CFGR , 3)==1) // HSE
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <RCC_IRQHandler+0x54>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <RCC_IRQHandler+0x4a>
			Handler_RCC();
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <RCC_IRQHandler+0x50>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4798      	blx	r3
			SET_Bit(RCC_Reg->RCC_CFGR,19);
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <RCC_IRQHandler+0x54>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <RCC_IRQHandler+0x54>)
 8000498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800049c:	6093      	str	r3, [r2, #8]
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000001c 	.word	0x2000001c
 80004a8:	40023800 	.word	0x40023800

080004ac <led>:
#include "RCC_Interface.h"

#include "../DIO/GPIO_Interface.h"
u8 x=10;
void led ()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	GPIO_V_Set_Pin_value(PinA_0_High);
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f7ff fe99 	bl	80001e8 <GPIO_V_Set_Pin_value>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <main>:
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	RCC_V_InitCLK();
 80004c0:	f7ff ff12 	bl	80002e8 <RCC_V_InitCLK>
	RCC_V_EnablePer(0, 0);
 80004c4:	2100      	movs	r1, #0
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff ff30 	bl	800032c <RCC_V_EnablePer>
	RCC_V_SetCallBack(led);
 80004cc:	4801      	ldr	r0, [pc, #4]	; (80004d4 <main+0x18>)
 80004ce:	f7ff ffaf 	bl	8000430 <RCC_V_SetCallBack>

    /* Loop forever */

	for(;;);
 80004d2:	e7fe      	b.n	80004d2 <main+0x16>
 80004d4:	080004ad 	.word	0x080004ad

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000506:	f000 f811 	bl	800052c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff ffd7 	bl	80004bc <main>

0800050e <LoopForever>:

LoopForever:
  b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800051c:	08000594 	.word	0x08000594
  ldr r2, =_sbss
 8000520:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000524:	20000020 	.word	0x20000020

08000528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <__libc_init_array>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	4d0d      	ldr	r5, [pc, #52]	; (8000564 <__libc_init_array+0x38>)
 8000530:	4c0d      	ldr	r4, [pc, #52]	; (8000568 <__libc_init_array+0x3c>)
 8000532:	1b64      	subs	r4, r4, r5
 8000534:	10a4      	asrs	r4, r4, #2
 8000536:	2600      	movs	r6, #0
 8000538:	42a6      	cmp	r6, r4
 800053a:	d109      	bne.n	8000550 <__libc_init_array+0x24>
 800053c:	4d0b      	ldr	r5, [pc, #44]	; (800056c <__libc_init_array+0x40>)
 800053e:	4c0c      	ldr	r4, [pc, #48]	; (8000570 <__libc_init_array+0x44>)
 8000540:	f000 f818 	bl	8000574 <_init>
 8000544:	1b64      	subs	r4, r4, r5
 8000546:	10a4      	asrs	r4, r4, #2
 8000548:	2600      	movs	r6, #0
 800054a:	42a6      	cmp	r6, r4
 800054c:	d105      	bne.n	800055a <__libc_init_array+0x2e>
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	f855 3b04 	ldr.w	r3, [r5], #4
 8000554:	4798      	blx	r3
 8000556:	3601      	adds	r6, #1
 8000558:	e7ee      	b.n	8000538 <__libc_init_array+0xc>
 800055a:	f855 3b04 	ldr.w	r3, [r5], #4
 800055e:	4798      	blx	r3
 8000560:	3601      	adds	r6, #1
 8000562:	e7f2      	b.n	800054a <__libc_init_array+0x1e>
 8000564:	0800058c 	.word	0x0800058c
 8000568:	0800058c 	.word	0x0800058c
 800056c:	0800058c 	.word	0x0800058c
 8000570:	08000590 	.word	0x08000590

08000574 <_init>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr

08000580 <_fini>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr
